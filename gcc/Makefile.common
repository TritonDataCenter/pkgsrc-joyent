# $NetBSD: Makefile,v 1.13 2010/05/06 10:21:17 adam Exp $

DISTNAME=		gcc-4.6.2
CATEGORIES=		lang
MASTER_SITES=		${MASTER_SITE_GNU:=gcc/gcc-${PKGVERSION}/}
EXTRACT_SUFX=		.tar.bz2

MPFR=			mpfr-3.0.1
GMP=			gmp-5.0.2
MPC=			mpc-0.9

DIST_SUBDIR=		gcc-joyent
DISTFILES=		${DEFAULT_DISTFILES}
DISTFILES+=		${GMP}.tar.bz2
DISTFILES+=		${MPC}.tar.gz
DISTFILES+=		${MPFR}.tar.gz
DISTFILES+=		allpatches
DISTFILES+=		values.c
SITES.${GMP}.tar.bz2=	ftp://ftp.gmplib.org/pub/${GMP}/
SITES.${MPC}.tar.gz=	http://www.multiprecision.org/mpc/download/
SITES.${MPFR}.tar.gz=	http://www.mpfr.org/${MPFR}/
SITES.allpatches=	http://www.mpfr.org/${MPFR}/
SITES.values.c=		http://www.openssl.org/~appro/

LICENSE=		gnu-gpl-v2 AND gnu-gpl-v3 AND gnu-lgpl-v2 AND gnu-lgpl-v3

PATCHDIR=		${.CURDIR}/../../joyent/gcc/patches
DISTINFO_FILE=		${.CURDIR}/../../joyent/gcc/distinfo

USE_TOOLS+=		awk:run bash:run perl chmod \
			gmake:build makeinfo msgfmt bison flex gm4 \
			gsed unzip

BUILD_DEPENDS+=		zip-[0-9]*:../../archivers/zip

# To avoid GNU surprises
CONFIG_SHELL=		${TOOLS_PATH.bash}

NOT_FOR_PLATFORM=	Interix-*-*
UNLIMIT_RESOURCES+=	datasize
UNLIMIT_RESOURCES+=	stacksize

.include "options.mk"

REPLACE_BASH+= contrib/dg-cmp-results.sh
REPLACE_BASH+= contrib/reghunt/bin/gcc-svn-patchlist
REPLACE_BASH+= contrib/reghunt/bin/gcc-svn-update
REPLACE_BASH+= contrib/reghunt/bin/gcc-svn-update-fix
REPLACE_BASH+= contrib/reghunt/bin/reg-hunt
REPLACE_BASH+= contrib/reghunt/bin/reg-test
REPLACE_BASH+= contrib/reghunt/date_based/reg_periodic
REPLACE_BASH+= contrib/reghunt/date_based/reg_search
REPLACE_BASH+= gcc/dbgcnt.def
REPLACE_BASH+= gcc/testsuite/gcc.test-framework/gen_directive_tests
REPLACE_BASH+= libstdc++-v3/scripts/run_doxygen

# Optional languages - change as required
# Ada could be added although there is a bootstrapping issue.  See
# ../gcc34-ada for guidance
BUILD_DEFS+=		BUILD_CXX BUILD_FORTRAN BUILD_JAVA BUILD_OBJC
BUILD_CXX?=		YES
BUILD_FORTRAN?=		YES
.if ${OPSYS} == "NetBSD"
BUILD_JAVA?=		NO
.else
BUILD_JAVA?=		YES
.endif
BUILD_OBJC?=		YES

LANGS= c

#.if !empty(BUILD_CXX:M[aA][dD][aA])
#LANGS+= ada
#.endif

.if !empty(BUILD_CXX:M[Yy][Ee][Ss])
LANGS+= c++
.endif

.if !empty(BUILD_FORTRAN:M[Yy][Ee][Ss])
LANGS+= fortran
.endif

.if !empty(BUILD_JAVA:M[Yy][Ee][Ss])
LANGS+= java
.endif

.if !empty(BUILD_OBJC:M[Yy][Ee][Ss])
LANGS+= objc
.endif


CONFIGURE_ARGS+=	--prefix=${PREFIX:Q}
CONFIGURE_ARGS+=	--enable-languages=${LANGS:Q}
CONFIGURE_ARGS+=	--enable-shared
CONFIGURE_ARGS+=	--enable-c99
CONFIGURE_ARGS+=	--enable-wchar_t
CONFIGURE_ARGS+=	--enable-__cxa_atexit
CONFIGURE_ARGS+=	--enable-long-long
CONFIGURE_ARGS+=	--with-local-prefix=${PREFIX:Q}
CONFIGURE_ARGS+=	--enable-libssp
CONFIGURE_ARGS+=	--enable-threads=posix
CONFIGURE_ARGS+=	--without-libiconv-prefix
CONFIGURE_ARGS+=	--with-gxx-include-dir=${PREFIX}/include/c++/
CONFIGURE_ARGS+=	--infodir=${PREFIX:Q}/${PKGINFODIR} --mandir=${PREFIX:Q}/${PKGMANDIR}

CONFIGURE_ENV+=		CONFIG_SHELL=${CONFIG_SHELL}

# ${WRKSRC}/gcc-4.4.1/libjava/contrib/aotcompile.py.in stores the path to
# a 'make' program so we need to make sure we give it the installed 'make' and not
# the tool wrapped one.
CONFIGURE_ENV+=		PKGSRC_MAKE=${TOOLS_PATH.gmake}
MAKE_ENV+=		PKGSRC_MAKE=${TOOLS_PATH.gmake}


# fastjar-0.93 from pkgsrc/archivers/fastjar seems to trigger a build
# failure (seen on NetBSD-5.0/i386) when building java.  So in case
# the fastjar package is installed, make sure the configure script
# doesn't pick it up.
CONFIGURE_ENV+=		JAR=no
MAKE_ENV+=		JAR=no
MAKE_ENV+=		ac_cv_prog_JAR=no

MAKE_ENV+=		SHELL=${CONFIG_SHELL}
MAKE_ENV+=		ac_cv_path_ac_cv_prog_chmod=${TOOLS_CHMOD}

# ${WRKSRC}/fixincludes/ looks for sed and compiles the path to sed into
# a binary so we need to make sure we give it the installed sed and not
# the tool wrapped one.
MAKE_ENV+=		ac_cv_path_SED=${TOOLS_SED}
MAKE_ENV+=		lt_cv_path_SED=${TOOLS_SED}

CPPFLAGS+=		-I${BUILDLINK_DIR}/include
CFLAGS+=		-I${BUILDLINK_DIR}/include

CONFIGURE_ARGS+=	--with-pic
CONFIGURE_ARGS+=	--without-gnu-ld
CONFIGURE_ARGS+=	--with-gnu-as
.if !empty(SUNOS_FLAVOR:Mjoyent)
CONFIGURE_ARGS+=	--with-as=${PREFIX}/bin/as
CONFIGURE_ARGS+=	--with-ld=/usr/bin/ld
CONFIGURE_ENV+=		NM=/usr/bin/nm
CONFIGURE_ENV+=		STRIP=/usr/bin/strip
.else
CONFIGURE_ARGS+=	--with-as=/usr/sfw/bin/gas
CONFIGURE_ARGS+=	--with-ld=/usr/ccs/bin/ld
.endif

post-extract:
	${MV} ${WRKDIR}/${GMP} ${WRKSRC}/gmp
	${MV} ${WRKDIR}/${MPFR} ${WRKSRC}/mpfr
	${MV} ${WRKDIR}/${MPC} ${WRKSRC}/mpc

.if exists(${WRKDIR}/allpatches)
post-patch:
	cd ${WRKSRC}/mpfr && ${PATCH} -N -p1 <${WRKDIR}/allpatches
.endif

pre-configure:
.if ${OPSYS} == "DragonFly"
	${CP} ${FILESDIR}/dragonfly.h ${WRKSRC}/gcc/config/dragonfly.h
	${CP} ${FILESDIR}/dragonfly-spec.h ${WRKSRC}/gcc/config/dragonfly-spec.h
	${CP} ${FILESDIR}/i386-dragonfly.h ${WRKSRC}/gcc/config/i386/dragonfly.h
	${CP} ${FILESDIR}/i386-dragonfly64.h ${WRKSRC}/gcc/config/i386/dragonfly64.h
.endif

do-configure:
	${MKDIR} ${WRKDIR}/obj
	cd ${WRKDIR}/obj; ${SETENV} ${CONFIGURE_ENV} ${CONFIG_SHELL} ${WRKSRC}/configure ${CONFIGURE_ARGS}

do-build:
	(${_ULIMIT_CMD} cd ${WRKDIR}/obj && ${SETENV} ${MAKE_ENV} ${GMAKE} -j${MAKE_JOBS:U1:Q} )

do-test:
.if (${MACHINE_GNU_ARCH} == "x86_64")
	(cd ${FILESDIR} && ${CP} netbsd64macro.dfs ${WRKSRC}/gcc/testsuite/ada/acats/support/macro.dfs)
.endif
	(cd ${WRKDIR}/obj && ${GMAKE} -k check)

GENERATE_PLIST+=                                                        \
	cd ${DESTDIR}${PREFIX} && \
	  ${FIND} * \( -type f -o -type l \) -print | ${SORT} ;
