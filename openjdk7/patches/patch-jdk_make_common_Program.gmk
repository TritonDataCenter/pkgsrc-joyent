$NetBSD$

--- jdk/make/common/Program.gmk.orig	2013-02-20 17:07:30.000000000 +0000
+++ jdk/make/common/Program.gmk
@@ -65,7 +65,10 @@ program: $(ACTUAL_PROGRAM)
 ifndef CROSS_COMPILE_ARCH
   # reuse the mapfiles in the launcher's directory, the same should
   # be applicable to the tool launchers as well.
-  FILES_m = $(BUILDDIR)/java/main/java/mapfile-$(ARCH)
+  # Except when the makefile requests a specific mapfile.
+  ifndef FILES_m
+    FILES_m = $(BUILDDIR)/java/main/java/mapfile-$(ARCH)
+  endif # ! FILES_m
   include $(BUILDDIR)/common/Mapfile-vers.gmk
 endif
 
@@ -99,6 +102,7 @@ ifneq (,$(findstring $(PLATFORM), linux
   LDFLAGS += -L $(LIBDIR)/$(LIBARCH)/jli
   OTHER_LDLIBS += -ljli
   ifeq ($(PLATFORM), solaris)
+    LDFLAGS += -R ${PREFIX}/java/openjdk7/jre/lib/${LIBARCH}/jli
     ifeq ($(ARCH_DATA_MODEL), 32)
       LDFLAGS += -R \$$ORIGIN/../lib/$(LIBARCH)/jli
       LDFLAGS += -R \$$ORIGIN/../jre/lib/$(LIBARCH)/jli
@@ -113,6 +117,9 @@ ifneq (,$(findstring $(PLATFORM), linux
     LDFLAGS += -Wl,-rpath -Wl,\$$ORIGIN/../lib/$(LIBARCH)/jli
     LDFLAGS += -Wl,-rpath -Wl,\$$ORIGIN/../jre/lib/$(LIBARCH)/jli
   endif # PLATFORM LINUX
+  ifeq ($(SYSTEM_ZLIB),true)
+    OTHER_LDLIBS += $(ZLIB_LIBS)
+  endif # SYSTEM_ZLIB
 endif # PLATFORM linux solaris
 
 ifeq ($(PLATFORM), windows)
@@ -363,7 +370,15 @@ ifeq ($(PLATFORM), macosx)
     OTHER_INCLUDES += -I$(SHARE_SRC)/native/java/util/zip/zlib-1.1.3
   endif # SYSTEM_ZLIB
 else # PLATFORM !MACOSX
-  OTHER_INCLUDES += -I$(SHARE_SRC)/native/java/util/zip/zlib-1.1.3
+  ifneq ($(SYSTEM_ZLIB), true)
+    OTHER_INCLUDES += -I$(SHARE_SRC)/native/java/util/zip/zlib-1.1.3
+  else
+    # on pkgsrc systems, zlib is expected to be on the common paths
+    ifneq ($(DISTRO), pkgsrc)
+      # this seems like a stupid thing to do with SYSTEM_ZLIB=true, but it's how the original works.
+      OTHER_INCLUDES += -I$(SHARE_SRC)/native/java/util/zip/zlib-1.1.3
+    endif # PLATFORM ! solaris
+  endif # SYSTEM_ZLIB
 endif
 
 OTHER_CPPFLAGS  += -DPROGNAME='"$(PROGRAM)"'
